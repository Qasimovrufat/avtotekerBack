@*<script type="text/javascript" data-cfasync="false">
    // <![CDATA[
            /*<![CDATA[*/window.olark || (function (c) {
                var f = window, d = document, l = f.location.protocol == "https:" ? "https:" : "http:", z = c.name, r = "load"; var nt = function () {
                    f[z] = function () {
                        (a.s = a.s || []).push(arguments)
                    }; var a = f[z]._ = {
                    }, q = c.methods.length; while (q--) {
                        (function (n) {
                            f[z][n] = function () {
                                f[z]("call", n, arguments)
                            }
                        })(c.methods[q])
                    } a.l = c.loader; a.i = nt; a.p = {
                        0: +new Date
                    }; a.P = function (u) {
                        a.p[u] = new Date - a.p[0]
                    }; function s() {
                        a.P(r); f[z](r)
                    } f.addEventListener ? f.addEventListener(r, s, false) : f.attachEvent("on" + r, s); var ld = function () {
                        function p(hd) {
                            hd = "head"; return ["<", hd, "></", hd, "><", i, ' onl' + 'oad="var d=', g, ";d.getElementsByTagName('head')[0].", j, "(d.", h, "('script')).", k, "='", l, "//", a.l, "'", '"', "></", i, ">"].join("")
                        } var i = "body", m = d[i]; if (!m) {
                            return setTimeout(ld, 100)
                        } a.P(1); var j = "appendChild", h = "createElement", k = "src", n = d[h]("div"), v = n[j](d[h](z)), b = d[h]("iframe"), g = "document", e = "domain", o; n.style.display = "none"; m.insertBefore(n, m.firstChild).id = z; b.frameBorder = "0"; b.id = z + "-loader"; if (/MSIE[ ]+6/.test(navigator.userAgent)) {
                            b.src = "javascript:false"
                        } b.allowTransparency = "true"; v[j](b); try {
                            b.contentWindow[g].open()
                        } catch (w) {
                            c[e] = d[e]; o = "javascript:var d=" + g + ".open();d.domain='" + d.domain + "';"; b[k] = o + "void(0);"
                        } try {
                            var t = b.contentWindow[g]; t.write(p()); t.close()
                        } catch (x) {
                            b[k] = o + 'd.write("' + p().replace(/"/g, String.fromCharCode(92) + '"') + '");d.close();'
                        } a.P(2)
                    }; ld()
                }; nt()
            })({
                loader: "static.olark.com/jsclient/loader0.js", name: "olark", methods: ["configure", "extend", "declare", "identify"]
            });
            /* custom configuration goes here (www.olark.com/documentation) */
            olark.identify('7830-582-10-3714');/*]]>*/
            // ]]></script>*@
@*<noscript><pre><a href="https://www.olark.com/site/7830-582-10-3714/contact" title="Contact us" target="_blank">Questions? Feedback?</a> powered by <a href="http://www.olark.com/?welcome" title="Olark live chat software">Olark live chat software</a></pre></noscript>*@
<!-- end olark code -->
<!-- JS -->

<script src="~/Scripts/currencies.js"></script>
<script>
    // CURRENCY TOOLS - CAROLINE SCHNAPP (mllegeorgesand@gmail.com)

    if (typeof Currency === "undefined") { var Currency = {} } Currency.cookie = { configuration: { expires: 365, path: "/", domain: window.location.hostname }, name: "currency", write: function (a) { jQuery.cookie(this.name, a, this.configuration) }, read: function () { return jQuery.cookie(this.name) }, destroy: function () { jQuery.cookie(this.name, null, this.configuration) } }; Currency.money_with_currency_format = { USD: "${{amount}} USD", EUR: "&euro;{{amount}} EUR", GBP: "&pound;{{amount}} GBP", CAD: "${{amount}} CAD", ARS: "${{amount_with_comma_separator}} ARS", AUD: "${{amount}} AUD", BBD: "${{amount}} Bds", BDT: "Tk {{amount}} BDT", BSD: "BS${{amount}} BSD", BHD: "{{amount}}0 BHD", BRL: "R$ {{amount_with_comma_separator}} BRL", BOB: "Bs{{amount_with_comma_separator}} BOB", BND: "${{amount}} BND", BGN: "{{amount}} лв BGN", MMK: "K{{amount}} MMK", KYD: "${{amount}} KYD", CLP: "${{amount_no_decimals}} CLP", CNY: "&#165;{{amount}} CNY", COP: "${{amount_with_comma_separator}} COP", CRC: "&#8353; {{amount_with_comma_separator}} CRC", HRK: "{{amount_with_comma_separator}} kn HRK", CZK: "{{amount_with_comma_separator}} K&#269;", DKK: "kr.{{amount_with_comma_separator}}", DOP: "RD$ {{amount_with_comma_separator}}", XCD: "EC${{amount}}", EGP: "LE {{amount}} EGP", XPF: "{{amount_no_decimals_with_space_separator}}} XPF", FJD: "FJ${{amount}}", GHS: "GH&#8373;{{amount}}", GTQ: "{{amount}} GTQ", GYD: "${{amount}} GYD", GEL: "{{amount}} GEL", HKD: "HK${{amount}}", HUF: "{{amount_no_decimals_with_comma_separator}} Ft", ISK: "{{amount_no_decimals}} kr ISK", INR: "Rs.{{amount}}", IDR: "Rp {{amount_with_comma_separator}}", NIS: "{{amount}} NIS", JMD: "${{amount}} JMD", JPY: "&#165;{{amount_no_decimals}} JPY", JOD: "{{amount}}0 JOD", KZT: "{{amount}} KZT", KES: "KSh{{amount}}", KWD: "{{amount}}0 KWD", LVL: "Ls {{amount}} LVL", LTL: "{{amount}} Lt", MXN: "$ {{amount}} MXN", MYR: "RM{{amount}} MYR", MUR: "Rs {{amount}} MUR", MDL: "{{amount}} MDL", MAD: "Dh {{amount}} MAD", MNT: "{{amount_no_decimals}} MNT", MZN: "Mt {{amount}} MZN", ANG: "{{amount}} NA&fnof;", NZD: "${{amount}} NZD", NGN: "&#8358;{{amount}} NGN", NOK: "kr {{amount_with_comma_separator}} NOK", OMR: "{{amount_with_comma_separator}} OMR", PKR: "Rs.{{amount}} PKR", PYG: "Gs. {{amount_no_decimals_with_comma_separator}} PYG", PEN: "S/. {{amount}} PEN", PHP: "&#8369;{{amount}} PHP", PLN: "{{amount_with_comma_separator}} zl PLN", QAR: "QAR {{amount_with_comma_separator}}", RON: "{{amount_with_comma_separator}} lei RON", RUB: "&#1088;&#1091;&#1073;{{amount_with_comma_separator}} RUB", SAR: "{{amount}} SAR", RSD: "{{amount}} RSD", SCR: "Rs {{amount}} SCR", SGD: "${{amount}} SGD", SYP: "S&pound;{{amount}} SYP", ZAR: "R {{amount}} ZAR", KRW: "&#8361;{{amount_no_decimals}} KRW", LKR: "Rs {{amount}} LKR", SEK: "{{amount_no_decimals}} kr SEK", CHF: "SFr. {{amount}} CHF", TWD: "${{amount}} TWD", THB: "{{amount}} &#xe3f; THB", TZS: "{{amount}} TZS", TTD: "${{amount}} TTD", TRY: "{{amount}}TL", UAH: "₴{{amount}} UAH", AED: "Dhs. {{amount}} AED", UYU: "${{amount_with_comma_separator}} UYU", VEB: "Bs. {{amount_with_comma_separator}} VEB", VND: "{{amount_no_decimals_with_comma_separator}} VND", ZMK: "ZMK{{amount_no_decimals_with_comma_separator}}" }; Currency.money_format = { USD: "${{amount}}", EUR: "&euro;{{amount}}", GBP: "&pound;{{amount}}", CAD: "${{amount}}", ARS: "${{amount_with_comma_separator}}", AUD: "${{amount}}", BBD: "${{amount}}", BDT: "Tk {{amount}}", BSD: "BS${{amount}}", BHD: "{{amount}}0 BHD", BRL: "R$ {{amount_with_comma_separator}}", BOB: "Bs{{amount_with_comma_separator}}", BND: "${{amount}}", BGN: "{{amount}} лв", MMK: "K{{amount}}", KYD: "${{amount}}", CLP: "${{amount_no_decimals}}", CNY: "&#165;{{amount}}", COP: "${{amount_with_comma_separator}}", CRC: "&#8353; {{amount_with_comma_separator}}", HRK: "{{amount_with_comma_separator}} kn", CZK: "{{amount_with_comma_separator}} K&#269;", DKK: "{{amount_with_comma_separator}}", DOP: "RD$ {{amount_with_comma_separator}}", XCD: "${{amount}}", EGP: "LE {{amount}}", XPF: "{{amount_no_decimals_with_space_separator}}} XPF", FJD: "${{amount}}", GHS: "GH&#8373;{{amount}}", GTQ: "{{amount}}", GYD: "${{amount}}", GEL: "{{amount}} GEL", HKD: "${{amount}}", HUF: "{{amount_no_decimals_with_comma_separator}}", ISK: "{{amount_no_decimals}} kr", INR: "{{amount}}", IDR: "{{amount_with_comma_separator}}", NIS: "{{amount}} NIS", JMD: "${{amount}}", JPY: "&#165;{{amount_no_decimals}}", JOD: "{{amount}}0 JD", KZT: "{{amount}} KZT", KES: "KSh{{amount}}", KWD: "{{amount}}0 KD", LVL: "Ls {{amount}}", LTL: "{{amount}} Lt", MXN: "$ {{amount}}", MYR: "RM{{amount}} MYR", MUR: "Rs {{amount}}", MDL: "{{amount}} MDL", MAD: "{{amount}} dh", MNT: "{{amount_no_decimals}} &#8366", MZN: "{{amount}} Mt", ANG: "&fnof;{{amount}}", NZD: "${{amount}}", NGN: "&#8358;{{amount}}", NOK: "kr {{amount_with_comma_separator}}", OMR: "{{amount_with_comma_separator}} OMR", PKR: "Rs.{{amount}}", PYG: "Gs. {{amount_no_decimals_with_comma_separator}}", PEN: "S/. {{amount}}", PHP: "&#8369;{{amount}}", PLN: "{{amount_with_comma_separator}} zl", QAR: "QAR {{amount_with_comma_separator}}", RON: "{{amount_with_comma_separator}} lei", RUB: "&#1088;&#1091;&#1073;{{amount_with_comma_separator}}", SAR: "{{amount}} SR", RSD: "{{amount}} RSD", SCR: "Rs {{amount}}", SGD: "${{amount}}", SYP: "S&pound;{{amount}}", ZAR: "R {{amount}}", KRW: "&#8361;{{amount_no_decimals}}", LKR: "Rs {{amount}}", SEK: "{{amount_no_decimals}} kr", CHF: "SFr. {{amount}}", TWD: "${{amount}}", THB: "{{amount}} &#xe3f;", TZS: "{{amount}} TZS", TTD: "${{amount}}", TRY: "{{amount}}TL", UAH: "₴{{amount}}", AED: "Dhs. {{amount}}", UYU: "${{amount_with_comma_separator}}", VEB: "Bs. {{amount_with_comma_separator}}", VND: "{{amount_no_decimals_with_comma_separator}}₫", ZMK: "K{{amount_no_decimals_with_comma_separator}}" }; Currency.formatMoney = function (b, f) { if (typeof b == "string") { b = b.replace(".", "") } var e = ""; var d = /\{\{\s*(\w+)\s*\}\}/; var a = (f || this.money_format); function c(g) { return g.replace(/(\d+)(\d{3}[\.,]?)/, "$1,$2") } switch (a.match(d)[1]) { case "amount": e = c(floatToString(b / 100, 2)); break; case "amount_no_decimals": e = c(floatToString(b / 100, 0)); break; case "amount_with_comma_separator": e = floatToString(b / 100, 2).replace(/\./, ","); break; case "amount_no_decimals_with_comma_separator": e = c(floatToString(b / 100, 0)).replace(/\./, ","); break } return a.replace(d, e) }; function floatToString(c, a) { var b = c.toFixed(a).toString(); if (b.match(/^\.\d+/)) { return "0" + b } else { return b } } Currency.currentCurrency = ""; Currency.format = "money_with_currency_format"; Currency.convertAll = function (c, b, a, d) { jQuery(a || "span.money").each(function () { if (jQuery(this).attr("data-currency") === b) { return } if (jQuery(this).attr("data-currency-" + b)) { jQuery(this).html(jQuery(this).attr("data-currency-" + b)) } else { var e = 0; var f = Currency[d || Currency.format][c] || "{{amount}}"; var g = Currency[d || Currency.format][b] || "{{amount}}"; if (f.indexOf("amount_no_decimals") !== -1) { e = Currency.convert(parseInt(jQuery(this).html().replace(/[^0-9]/g, ""), 10) * 100, c, b) } else { e = Currency.convert(parseInt(jQuery(this).html().replace(/[^0-9]/g, ""), 10), c, b) } var h = Currency.formatMoney(e, g); jQuery(this).html(h); jQuery(this).attr("data-currency-" + b, h) } jQuery(this).attr("data-currency", b) }); this.currentCurrency = b; this.cookie.write(b) };



    function currencyToggle() {

        // CURRENCY SELECTOR

        Currency.format = 'money_format';


        var shopCurrency = 'USD';

        // Sometimes merchants change their shop currency, let's tell our JavaScript file
        Currency.money_with_currency_format[shopCurrency] = "${{amount}} USD";
        Currency.money_format[shopCurrency] = "${{amount}}";

        // Default currency
        var defaultCurrency = 'USD' || shopCurrency;

        // Cookie currency
        var cookieCurrency = Currency.cookie.read();

        // Fix for customer account pages
        jQuery('span.money span.money').each(function () {
            jQuery(this).parents('span.money').removeClass('money');
        });

        // Saving the current price
        jQuery('span.money').each(function () {
            jQuery(this).attr('data-currency-USD', jQuery(this).html());
        });

        // If there's no cookie.
        if (cookieCurrency == null) {
            if (shopCurrency !== defaultCurrency) {
                Currency.convertAll(shopCurrency, defaultCurrency);
            }
            else {
                Currency.currentCurrency = defaultCurrency;
            }
        }
            // If the cookie value does not correspond to any value in the currency dropdown.
        else if (jQuery('[name=currencies]').size() && jQuery('[name=currencies] option[value=' + cookieCurrency + ']').size() === 0) {
            Currency.currentCurrency = shopCurrency;
            Currency.cookie.write(shopCurrency);
        }
        else if (cookieCurrency === shopCurrency) {
            Currency.currentCurrency = shopCurrency;
        }
        else {
            Currency.convertAll(shopCurrency, cookieCurrency);
        }

        jQuery('[name=currencies]').val(Currency.currentCurrency).change(function () {
            var newCurrency = jQuery(this).val();
            Currency.convertAll(Currency.currentCurrency, newCurrency);
            jQuery('.selected-currency').text(Currency.currentCurrency);
        });

        var original_selectCallback = window.selectCallback;

        var selectCallback = function (variant, selector) {
            original_selectCallback(variant, selector);
            Currency.convertAll(shopCurrency, jQuery('[name=currencies]').val());
            jQuery('.selected-currency').text(Currency.currentCurrency);
        };

        jQuery('.selected-currency').text(Currency.currentCurrency);

    };

    currencyToggle();

</script>


<script src="//cdn.shopify.com/s/files/1/0889/3312/t/2/assets/jquery.nivoslider.min.js" type="text/javascript"></script>
<script src="//cdn.shopify.com/s/files/1/0889/3312/t/2/assets/jquery.bxslider.min.js" type="text/javascript"></script>
<script src="//cdn.shopify.com/s/files/1/0889/3312/t/2/assets/jquery.parallax.min.js" type="text/javascript"></script>
<script>
    jQuery(document).ready(function ($) {
        // NIVOSLIDER
        $('.nivoSlider').nivoSlider({
            effect: 'fade',
            animSpeed: 500,
            pauseTime: 7000,
            startSlide: 0,
            pauseOnHover: true,
            directionNav: false,
            directionNavHide: false,
            controlNav: true
        });

        if (device.desktop()) {

            // PARALLAX BLOCK #1
            if ($("#parallax_block").length) {
                $(window).load(function () {
                    $("#parallax_block").parallax("50%", -0.4);
                });

                $(window).resize(function () {
                    $("#parallax_block").parallax("50%", -0.4);
                });
            };

            // SMOOTHSCROLL 4 WEBKIT & IE
            var platform = navigator.platform.toLowerCase();
            if (platform.indexOf('win') == 0 || platform.indexOf('linux') == 0) {
                if ($.browser.webkit || $.browser.msie) {
                    /* jquery.simplr.smoothscroll - https://github.com/simov/simplr-smoothscroll */

                    ; (function (e) { "use strict"; e.srSmoothscroll = function (t) { var n = e.extend({ step: 85, speed: 600, ease: "linear" }, t || {}); var r = e(window), i = e(document), s = 0, o = n.step, u = n.speed, a = r.height(), f = navigator.userAgent.indexOf("AppleWebKit") !== -1 ? e("body") : e("html"), l = false; e("body").mousewheel(function (e, t) { l = true; if (t < 0) s = s + a >= i.height() ? s : s += o; else s = s <= 0 ? 0 : s -= o; f.stop().animate({ scrollTop: s }, u, n.ease, function () { l = false }); return false }); r.on("resize", function (e) { a = r.height() }).on("scroll", function (e) { if (!l) s = r.scrollTop() }) } })(jQuery);


                    /* jquery.mousewheel - https://github.com/jquery/jquery-mousewheel */

                    !function (a) { "function" == typeof define && define.amd ? define(["jquery"], a) : "object" == typeof exports ? module.exports = a : a(jQuery) }(function (a) { function b(b) { var g = b || window.event, h = i.call(arguments, 1), j = 0, l = 0, m = 0, n = 0, o = 0, p = 0; if (b = a.event.fix(g), b.type = "mousewheel", "detail" in g && (m = -1 * g.detail), "wheelDelta" in g && (m = g.wheelDelta), "wheelDeltaY" in g && (m = g.wheelDeltaY), "wheelDeltaX" in g && (l = -1 * g.wheelDeltaX), "axis" in g && g.axis === g.HORIZONTAL_AXIS && (l = -1 * m, m = 0), j = 0 === m ? l : m, "deltaY" in g && (m = -1 * g.deltaY, j = m), "deltaX" in g && (l = g.deltaX, 0 === m && (j = -1 * l)), 0 !== m || 0 !== l) { if (1 === g.deltaMode) { var q = a.data(this, "mousewheel-line-height"); j *= q, m *= q, l *= q } else if (2 === g.deltaMode) { var r = a.data(this, "mousewheel-page-height"); j *= r, m *= r, l *= r } if (n = Math.max(Math.abs(m), Math.abs(l)), (!f || f > n) && (f = n, d(g, n) && (f /= 40)), d(g, n) && (j /= 40, l /= 40, m /= 40), j = Math[j >= 1 ? "floor" : "ceil"](j / f), l = Math[l >= 1 ? "floor" : "ceil"](l / f), m = Math[m >= 1 ? "floor" : "ceil"](m / f), k.settings.normalizeOffset && this.getBoundingClientRect) { var s = this.getBoundingClientRect(); o = b.clientX - s.left, p = b.clientY - s.top } return b.deltaX = l, b.deltaY = m, b.deltaFactor = f, b.offsetX = o, b.offsetY = p, b.deltaMode = 0, h.unshift(b, j, l, m), e && clearTimeout(e), e = setTimeout(c, 200), (a.event.dispatch || a.event.handle).apply(this, h) } } function c() { f = null } function d(a, b) { return k.settings.adjustOldDeltas && "mousewheel" === a.type && b % 120 === 0 } var e, f, g = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"], h = "onwheel" in document || document.documentMode >= 9 ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"], i = Array.prototype.slice; if (a.event.fixHooks) for (var j = g.length; j;) a.event.fixHooks[g[--j]] = a.event.mouseHooks; var k = a.event.special.mousewheel = { version: "3.1.12", setup: function () { if (this.addEventListener) for (var c = h.length; c;) this.addEventListener(h[--c], b, !1); else this.onmousewheel = b; a.data(this, "mousewheel-line-height", k.getLineHeight(this)), a.data(this, "mousewheel-page-height", k.getPageHeight(this)) }, teardown: function () { if (this.removeEventListener) for (var c = h.length; c;) this.removeEventListener(h[--c], b, !1); else this.onmousewheel = null; a.removeData(this, "mousewheel-line-height"), a.removeData(this, "mousewheel-page-height") }, getLineHeight: function (b) { var c = a(b), d = c["offsetParent" in a.fn ? "offsetParent" : "parent"](); return d.length || (d = a("body")), parseInt(d.css("fontSize"), 10) || parseInt(c.css("fontSize"), 10) || 16 }, getPageHeight: function (b) { return a(b).height() }, settings: { adjustOldDeltas: !0, normalizeOffset: !0 } }; a.fn.extend({ mousewheel: function (a) { return a ? this.bind("mousewheel", a) : this.trigger("mousewheel") }, unmousewheel: function (a) { return this.unbind("mousewheel", a) } }) });


                    //$.srSmoothscroll({
                    //    step: 100,
                    //    speed: 600,
                    //    ease: 'linear',
                    //    excludeWithin: '.zoomWrapper'
                    //});
                };
            };
        };
    });
</script>
<!-- COLLECTION PAGE SCRIPTS -->
<!-- CUSTOMERS PAGES SCRIPTS -->

<script src="//cdn.shopify.com/s/files/1/0889/3312/t/2/assets/jquery.fancybox.min.js" type="text/javascript"></script>

<script async src="//cdn.shopify.com/s/files/1/0889/3312/t/2/assets/jquery.ajax-cart.js" type="text/javascript"></script>
<script src="~/Scripts/shop7d44.js" type="text/javascript"></script>
<script>

</script>
<!--Start of Tawk.to Script-->
<script type="text/javascript">
var Tawk_API=Tawk_API||{}, Tawk_LoadStart=new Date();
(function(){
var s1=document.createElement("script"),s0=document.getElementsByTagName("script")[0];
s1.async=true;
s1.src='https://embed.tawk.to/58624e16f81f1673b644dbc2/default';
s1.charset='UTF-8';
s1.setAttribute('crossorigin','*');
s0.parentNode.insertBefore(s1,s0);
})();
</script>
<!--End of Tawk.to Script-->

<script>
   
    $(document).ready(function () {      
        //if (!localStorage.thisCurrency) {
            localStorage.thisCurrency = "AZN";
       // }
        $(".price" + localStorage.thisCurrency).show();       
        $("#currencySelect").val(localStorage.thisCurrency).prop("selected", true);
        $("#currencySelect").trigger('refresh');

        $(".megamenu_custom_sub").mCustomScrollbar();
       // $("body").mCustomScrollbar();

    })
</script>